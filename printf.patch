diff --git a/src/printf/printf.c b/src/printf/printf.c
index 471ec6c..7f5532f 100644
--- a/src/printf/printf.c
+++ b/src/printf/printf.c
@@ -47,11 +47,6 @@ extern "C" {
 #include <limits.h>
 #endif // __cplusplus
 
-// Define this globally (e.g. gcc -DPRINTF_INCLUDE_CONFIG_H ...) to include the
-// printf_config.h header file
-#if PRINTF_INCLUDE_CONFIG_H
-#include "printf_config.h"
-#endif
 
 #include <stdbool.h>
 #include <stdint.h>
@@ -294,6 +294,12 @@ static inline int get_exp2(double_with_bit_access x)
 // behavior with -LONG_MIN or -LLONG_MIN
 #define ABS_FOR_PRINTING(_x) ((printf_unsigned_value_t) ( (_x) > 0 ? (_x) : -((printf_signed_value_t)_x) ))

+
+__attribute__((weak)) void putchar_(char c)
+{
+  (void) c;
+}
+
 // wrapper (used as buffer) for output function type
 //
 // One of the following must hold:
@@ -358,7 +354,7 @@ static inline void putchar_wrapper(char c, void* unused)
   putchar_(c);
 }
 
-static inline output_gadget_t discarding_gadget()
+static inline output_gadget_t discarding_gadget(void)
 {
   output_gadget_t gadget;
   gadget.function = NULL;
@@ -390,7 +386,7 @@ static inline output_gadget_t function_gadget(void (*function)(char, void*), voi
   return result;
 }
 
-static inline output_gadget_t extern_putchar_gadget()
+static inline output_gadget_t extern_putchar_gadget(void)
 {
   return function_gadget(putchar_wrapper, NULL);
 }
@@ -521,7 +517,7 @@ static void print_integer_finalization(output_gadget_t* output, char* buf, print
 }
 
 // An internal itoa-like function
-static void print_integer(output_gadget_t* output, printf_unsigned_value_t value, bool negative, numeric_base_t base, printf_size_t precision, printf_size_t width, printf_flags_t flags)
+void print_integer(output_gadget_t* output, printf_unsigned_value_t value, bool negative, numeric_base_t base, printf_size_t precision, printf_size_t width, printf_flags_t flags)
 {
   char buf[PRINTF_INTEGER_BUFFER_SIZE];
   printf_size_t len = 0U;
@@ -848,7 +848,7 @@ static void print_exponential_number(output_gadget_t* output, double number, pri
   double abs_number =  negative ? -number : number;
 
   int floored_exp10;
-  bool abs_exp10_covered_by_powers_table;
+  bool abs_exp10_covered_by_powers_table = false;
   struct scaling_factor normalization;
 
 
@@ -959,7 +955,7 @@ static void print_exponential_number(output_gadget_t* output, double number, pri
 }
 #endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
 
-static void print_floating_point(output_gadget_t* output, double value, printf_size_t precision, printf_size_t width, printf_flags_t flags, bool prefer_exponential)
+void print_floating_point(output_gadget_t* output, double value, printf_size_t precision, printf_size_t width, printf_flags_t flags, bool prefer_exponential)
 {
   char buf[PRINTF_DECIMAL_BUFFER_SIZE];
   printf_size_t len = 0U;
diff --git a/src/printf/printf.h b/src/printf/printf.h
index 7bece2b..029621f 100644
--- a/src/printf/printf.h
+++ b/src/printf/printf.h
@@ -57,6 +57,8 @@ __attribute__((format(__printf__, (one_based_format_index), (first_arg))))
 # define ATTR_VPRINTF(one_based_format_index)
 #endif

+#include <printf/printf_config.h>
+
 #ifndef PRINTF_ALIAS_STANDARD_FUNCTION_NAMES
 #define PRINTF_ALIAS_STANDARD_FUNCTION_NAMES 0
 #endif
